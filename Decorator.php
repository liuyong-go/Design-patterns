<?php
/**
 * 装饰（Decorator）模式
 *
 * User: liuyong
 * Date: 2020-03-24
 * Time: 16:16
 *
 * 装饰（Decorator）模式的定义：指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式，它属于对象结构型模式。
 * 装饰（Decorator）模式的主要优点有：
  采用装饰模式扩展对象的功能比采用继承方式更加灵活。
  可以设计出多个不同的具体装饰类，创造出多个不同行为的组合。

 * 其主要缺点是：装饰模式增加了许多子类，如果过度使用会使程序变得很复杂。
 * 装饰模式主要包含以下角色。
抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。
具体构件（Concrete    Component）角色：实现抽象构件，通过装饰角色为其添加一些职责。
抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。
具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。
 */

/**
 * Interface Component
 * 抽象构建角色
 */
interface Component{
    public function operation();
}
//具体构建角色
class ConcreteComponent implements Component{
    public function __construct()
    {
        echo "创建具体构建角色\n";
    }

    public function operation()
    {
        echo "调用具体构件角色的方法operation()\n";
        // TODO: Implement operation() method.
    }
}

//抽象装饰角色
class Decorator implements Component{
    private $component;

    public function __construct(Component $component)
    {
        $this->component = $component;
    }

    public function operation()
    {
        $this->component->operation();
        // TODO: Implement operation() method.
    }
}
//具体装饰角色
class ConcreteDecorator extends Decorator{

    public function operation()
    {
        parent::operation(); // TODO: Change the autogenerated stub
        $this->addFunction();
    }
    public function addFunction(){
        echo "为具体构件角色增加额外的功能addedFunction\n";
    }
}
$de = new ConcreteDecorator(new ConcreteComponent());
$de->operation();